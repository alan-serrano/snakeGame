{"version":3,"sources":["Components/Snake.js","Components/Food.js","Components/Grid.js","App.js","index.js"],"names":["Snake","limit","this","x","y","xSpeed","ySpeed","tail","i","length","push","coordR1C1","coord","address","Food","getRandomNumber","min","max","Math","floor","random","Row","size","children","rowStyles","height","className","style","Column","coordSnake","coordFood","propKey","columnStyles","flexBasis","classNames","hasOwnProperty","Grid","parseInt","useState","isStart","setIsStart","isGameOver","setIsGameOver","isPaused","setIsPaused","food","useRef","snake","useEffect","current","setCoordFood","getR1C1","setCoordSnake","score","setScore","id","setTimeout","update","isDeath","getHeadR1C1","changePosition","prevScore","grow","clearTimeout","document","addEventListener","handleOnKeyPress","removeEventListener","rows","Array","fill","columns","e","keyCode","map","value","row","key","column","onClick","prev","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b58f6c63.chunk.js","sourcesContent":["export default class Snake {\n    constructor(limit) {\n        this.x = 0;\n        this.y = 0;\n        this.xSpeed = 1;\n        this.ySpeed = 0;\n        this.tail = [{x:0, y:0}];\n        this.limit = limit;\n    }\n\n    get isDeath() {\n        // When it exceeds the limits of the grid\n        if(this.x > this.limit || this.x < 0) {\n            return true;\n        }\n\n        if(this.y > this.limit || this.y < 0) {\n            return true;\n        }\n\n        // When it crosses some part of its tail\n        for(let i = 0; i < this.tail.length - 1; i++) {\n            let address = this.tail[i];\n\n            if(this.x === address.x && this.y === address.y) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    update() {\n        this.x += this.xSpeed;\n        this.y += this.ySpeed;\n\n        // Shifting the values every update\n        for( let i = 0; i < this.tail.length; i++ ) {\n            if(this.tail[i+1]) {\n                this.tail[i] = this.tail[i + 1];\n            }\n        }\n\n        // Adding new value to the head of the snake\n        this.tail[this.tail.length - 1] = {x: this.x, y: this.y};\n    }\n\n    grow() {\n        this.tail.push(this.tail[this.tail.length - 1]);\n    }\n\n    getR1C1() {\n        let coordR1C1 = {};\n        for (const coord of this.tail) {\n            coordR1C1[`r${coord.y}c${coord.x}`] = null;\n        }\n\n        return coordR1C1;\n    }\n    \n    getHeadR1C1() {\n        return `r${this.y}c${this.x}`\n    }\n}","export default class Food {\n    constructor(limit) {\n        this.x = this.getRandomNumber(1, limit);\n        this.y = this.getRandomNumber(1, limit);\n        this.limit = limit;\n    }\n\n    changePosition() {\n        this.x = this.getRandomNumber(0, this.limit);\n        this.y = this.getRandomNumber(0, this.limit);\n    }\n\n    getRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    getR1C1() {\n        return `r${this.y}c${this.x}`\n    }\n}","import React, {useState, useEffect, useRef} from 'react';\nimport './Grid.scss';\nimport Snake from './Snake';\nimport Food from './Food';\n\nfunction Grid({size}) {\n    size = parseInt(size);\n    \n    const [isStart, setIsStart] = useState(false);\n    const [isGameOver, setIsGameOver] = useState(false);\n    const [isPaused, setIsPaused] = useState(false);\n    const food = useRef();\n    const snake = useRef();\n    \n    useEffect(function initializeSnake() {\n        if(isStart) {\n            food.current = new Food(size - 1);\n            setCoordFood(food.current.getR1C1()); // Setting the first value of the food\n            snake.current = new Snake(size - 1);\n        }\n    }, [size, isStart]);\n    \n    const [coordFood, setCoordFood] = useState('');\n    const [coordSnake, setCoordSnake] = useState({'r0c0': null});\n    const [score, setScore] = useState(0);\n\n    useEffect(function speedUpSnake() {\n        if(!isStart || isPaused) return;\n\n        const id = setTimeout(() => {\n            snake.current.update();\n\n            let gameOver = snake.current.isDeath;\n\n            if( gameOver ) {\n                setIsGameOver(true);\n                setIsStart(false);\n                \n            } else {\n                if (snake.current.getHeadR1C1() === food.current.getR1C1()) {\n\n                    while (snake.current.getR1C1().hasOwnProperty(food.current.getR1C1())) {\n                        food.current.changePosition();\n                    }\n                    setScore((prevScore) => prevScore + 10);\n                    setCoordFood(food.current.getR1C1());\n                    snake.current.grow();\n                }\n\n                setCoordSnake(snake.current.getR1C1());\n            }\n        }, 100);\n\n        return () => {\n            clearTimeout(id);\n        };\n    }, [coordSnake, isStart, isPaused]);\n\n    useEffect(function onKeyPressGlobal() {\n        document.addEventListener('keydown', handleOnKeyPress);\n\n        return () => {\n            document.removeEventListener('keydown', handleOnKeyPress);\n        }\n    })\n\n    let rows = new Array(size).fill();\n    let columns = new Array(size).fill();\n    \n    rows = rows.map( (value, row) =>\n        <Row key={row} size={size}>\n            { columns.map( (value, column) =>\n                <Column\n                    key={column}\n                    size={size}\n                    propKey={`r${row}c${column}`}\n                    coordSnake={coordSnake}\n                    coordFood={coordFood}\n                />\n            )}\n        </Row>\n    );\n    \n    function handleOnKeyPress(e) {\n        // UP\n        if(e.keyCode === 38) {\n            if( snake.current.ySpeed === 0 ) {\n                snake.current.ySpeed = -1;\n                snake.current.xSpeed = 0;\n            }\n        }\n        // RIGTH\n        if(e.keyCode === 39) {\n            if(snake.current.xSpeed === 0) {\n                snake.current.ySpeed = 0;\n                snake.current.xSpeed = 1;\n            }\n        }\n        // DOWN\n        if(e.keyCode === 40) {\n            if(snake.current.ySpeed === 0) {\n                snake.current.ySpeed = 1;\n                snake.current.xSpeed = 0;\n            }\n        }\n        // LEFT\n        if(e.keyCode === 37) {\n            if(snake.current.xSpeed === 0) {\n                snake.current.ySpeed = 0;\n                snake.current.xSpeed = -1;\n            }\n        }\n\n        // ESC\n        if(e.keyCode === 27 && isStart) {\n            setIsPaused(isPaused => !isPaused);\n        }\n    }\n\n    function onClickStart() {\n        setIsStart(true);\n        setIsGameOver(false);\n        setScore(0);\n    }\n    \n    function onClickContinue() {\n        setIsPaused(prev => !prev);\n    }\n    \n    return (\n        <div className=\"grid\">\n            {rows}\n            <p className=\"score\">\n                SCORE: {score}\n            </p>\n\n            { !isStart &&\n                <div className='info'>\n                    {isGameOver &&\n                        <div className=\"game-over\">\n                            <p>GAME OVER</p>\n                            <p>Your score: {score}</p>\n                        </div>\n                    }\n\n                    <button className=\"btn-start-new-game\" onClick={onClickStart}>\n                        Start a new Game\n                    </button>\n                </div>\n            }\n\n            { (isStart && isPaused) &&\n                <div className=\"info paused\">\n                    <button className=\"btn-start-new-game\" onClick={onClickContinue}>\n                            Continue the game\n                    </button>\n                </div>\n            }\n\n        </div>\n    );\n}\n\n/* COMPONENT ROW */\nfunction Row({size, children}) {\n    const rowStyles = {\n        height: 1/size*100 + '%'\n    }\n\n    return (\n        <div className=\"row\" style={rowStyles}>\n            {children}\n        </div>\n    );\n}\n\n/* COMPONENT COLUMN */\nfunction Column({size, coordSnake, coordFood, propKey}) {\n    const columnStyles = {\n        flexBasis: 1/size*100 + '%'\n    }\n\n    let classNames = 'column';\n\n    if(coordSnake.hasOwnProperty(propKey)) {\n        classNames += ' snake'\n    }\n    \n    if(coordFood === propKey) {\n        classNames += ' food'\n    }\n    \n    return <div className={classNames} style={columnStyles}></div>;\n}\n\nexport default Grid;","import React from 'react';\nimport './App.scss'\nimport Grid from './Components/Grid';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <h1>Snake Game</h1>\n            <Grid size=\"24\"/>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}